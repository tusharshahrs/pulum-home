"use strict";
// Copyright 2016-2019, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const dynamic = require("@pulumi/pulumi/dynamic");
/**
 * Transform is a dynamic resource that evaluates a function when its inputs change and exports the result.
 */
class Transform extends dynamic.Resource {
    constructor(name, input, func, opts) {
        const provider = {
            check: (olds, news) => Promise.resolve({ inputs: news, failedChecks: [] }),
            diff: (id, olds, news) => Promise.resolve({}),
            create: (inputs) => Promise.resolve({
                id: name,
                outs: { output: func(inputs.input) },
            }),
            update: (id, olds, news) => Promise.resolve({
                outs: { output: func(news.input) },
            }),
            read: (id, state) => Promise.resolve({ id: id, props: state }),
            delete: (id, props) => Promise.resolve(),
        };
        super(provider, name, { input: input, output: undefined }, opts);
    }
}
/**
 * transform evaluates the given function on the given input iff the input's value has changed and returns the result
 * as an output.
 */
function transform(name, input, func, opts) {
    return (new Transform(name, input, func, opts)).output;
}
exports.default = transform;
//# sourceMappingURL=transform.js.map