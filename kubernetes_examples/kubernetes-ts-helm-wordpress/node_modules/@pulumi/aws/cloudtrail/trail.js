"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a CloudTrail resource.
 *
 * > *NOTE:* For a multi-region trail, this resource must be in the home region of the trail.
 *
 * > *NOTE:* For an organization trail, this resource must be in the master account of the organization.
 *
 * ## Example Usage
 * ### Basic
 *
 * Enable CloudTrail to capture all compatible management events in region.
 * For capturing events from services like IAM, `includeGlobalServiceEvents` must be enabled.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getCallerIdentity({});
 * const foo = new aws.s3.Bucket("foo", {
 *     forceDestroy: true,
 *     policy: current.then(current => `{
 *     "Version": "2012-10-17",
 *     "Statement": [
 *         {
 *             "Sid": "AWSCloudTrailAclCheck",
 *             "Effect": "Allow",
 *             "Principal": {
 *               "Service": "cloudtrail.amazonaws.com"
 *             },
 *             "Action": "s3:GetBucketAcl",
 *             "Resource": "arn:aws:s3:::tf-test-trail"
 *         },
 *         {
 *             "Sid": "AWSCloudTrailWrite",
 *             "Effect": "Allow",
 *             "Principal": {
 *               "Service": "cloudtrail.amazonaws.com"
 *             },
 *             "Action": "s3:PutObject",
 *             "Resource": "arn:aws:s3:::tf-test-trail/prefix/AWSLogs/${current.accountId}/*",
 *             "Condition": {
 *                 "StringEquals": {
 *                     "s3:x-amz-acl": "bucket-owner-full-control"
 *                 }
 *             }
 *         }
 *     ]
 * }
 * `),
 * });
 * const foobar = new aws.cloudtrail.Trail("foobar", {
 *     s3BucketName: foo.id,
 *     s3KeyPrefix: "prefix",
 *     includeGlobalServiceEvents: false,
 * });
 * ```
 * ### Data Event Logging
 *
 * CloudTrail can log [Data Events](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html) for certain services such as S3 bucket objects and Lambda function invocations. Additional information about data event configuration can be found in the [CloudTrail API DataResource documentation](https://docs.aws.amazon.com/awscloudtrail/latest/APIReference/API_DataResource.html).
 * ### Logging All Lambda Function Invocations
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.cloudtrail.Trail("example", {
 *     eventSelectors: [{
 *         dataResources: [{
 *             type: "AWS::Lambda::Function",
 *             values: ["arn:aws:lambda"],
 *         }],
 *         includeManagementEvents: true,
 *         readWriteType: "All",
 *     }],
 * });
 * ```
 * ### Logging All S3 Bucket Object Events
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.cloudtrail.Trail("example", {
 *     eventSelectors: [{
 *         dataResources: [{
 *             type: "AWS::S3::Object",
 *             values: ["arn:aws:s3:::"],
 *         }],
 *         includeManagementEvents: true,
 *         readWriteType: "All",
 *     }],
 * });
 * ```
 * ### Logging Individual S3 Bucket Events
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const important_bucket = pulumi.output(aws.s3.getBucket({
 *     bucket: "important-bucket",
 * }, { async: true }));
 * const example = new aws.cloudtrail.Trail("example", {
 *     eventSelectors: [{
 *         dataResources: [{
 *             type: "AWS::S3::Object",
 *             // Make sure to append a trailing '/' to your ARN if you want
 *             // to monitor all objects in a bucket.
 *             values: [pulumi.interpolate`${important_bucket.arn}/`],
 *         }],
 *         includeManagementEvents: true,
 *         readWriteType: "All",
 *     }],
 * });
 * ```
 * ### Sending Events to CloudWatch Logs
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleLogGroup = new aws.cloudwatch.LogGroup("example", {});
 * const exampleTrail = new aws.cloudtrail.Trail("example", {
 *     cloudWatchLogsGroupArn: pulumi.interpolate`${exampleLogGroup.arn}:*`,
 * });
 * ```
 *
 * ## Import
 *
 * Cloudtrails can be imported using the `name`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:cloudtrail/trail:Trail sample my-sample-trail
 * ```
 */
class Trail extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["cloudWatchLogsGroupArn"] = state ? state.cloudWatchLogsGroupArn : undefined;
            inputs["cloudWatchLogsRoleArn"] = state ? state.cloudWatchLogsRoleArn : undefined;
            inputs["enableLogFileValidation"] = state ? state.enableLogFileValidation : undefined;
            inputs["enableLogging"] = state ? state.enableLogging : undefined;
            inputs["eventSelectors"] = state ? state.eventSelectors : undefined;
            inputs["homeRegion"] = state ? state.homeRegion : undefined;
            inputs["includeGlobalServiceEvents"] = state ? state.includeGlobalServiceEvents : undefined;
            inputs["insightSelectors"] = state ? state.insightSelectors : undefined;
            inputs["isMultiRegionTrail"] = state ? state.isMultiRegionTrail : undefined;
            inputs["isOrganizationTrail"] = state ? state.isOrganizationTrail : undefined;
            inputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["s3BucketName"] = state ? state.s3BucketName : undefined;
            inputs["s3KeyPrefix"] = state ? state.s3KeyPrefix : undefined;
            inputs["snsTopicName"] = state ? state.snsTopicName : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.s3BucketName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 's3BucketName'");
            }
            inputs["cloudWatchLogsGroupArn"] = args ? args.cloudWatchLogsGroupArn : undefined;
            inputs["cloudWatchLogsRoleArn"] = args ? args.cloudWatchLogsRoleArn : undefined;
            inputs["enableLogFileValidation"] = args ? args.enableLogFileValidation : undefined;
            inputs["enableLogging"] = args ? args.enableLogging : undefined;
            inputs["eventSelectors"] = args ? args.eventSelectors : undefined;
            inputs["includeGlobalServiceEvents"] = args ? args.includeGlobalServiceEvents : undefined;
            inputs["insightSelectors"] = args ? args.insightSelectors : undefined;
            inputs["isMultiRegionTrail"] = args ? args.isMultiRegionTrail : undefined;
            inputs["isOrganizationTrail"] = args ? args.isOrganizationTrail : undefined;
            inputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["s3BucketName"] = args ? args.s3BucketName : undefined;
            inputs["s3KeyPrefix"] = args ? args.s3KeyPrefix : undefined;
            inputs["snsTopicName"] = args ? args.snsTopicName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["homeRegion"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Trail.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Trail resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Trail(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Trail.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Trail.__pulumiType;
    }
}
exports.Trail = Trail;
/** @internal */
Trail.__pulumiType = 'aws:cloudtrail/trail:Trail';
//# sourceMappingURL=trail.js.map