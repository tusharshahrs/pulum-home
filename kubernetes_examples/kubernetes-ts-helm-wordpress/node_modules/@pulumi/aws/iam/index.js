"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./accessKey"));
__export(require("./accountAlias"));
__export(require("./accountPasswordPolicy"));
__export(require("./documents"));
__export(require("./getAccountAlias"));
__export(require("./getGroup"));
__export(require("./getInstanceProfile"));
__export(require("./getPolicy"));
__export(require("./getPolicyDocument"));
__export(require("./getRole"));
__export(require("./getServerCertificate"));
__export(require("./getUser"));
__export(require("./group"));
__export(require("./groupMembership"));
__export(require("./groupPolicy"));
__export(require("./groupPolicyAttachment"));
__export(require("./instanceProfile"));
__export(require("./managedPolicies"));
__export(require("./openIdConnectProvider"));
__export(require("./policy"));
__export(require("./policyAttachment"));
__export(require("./principals"));
__export(require("./role"));
__export(require("./rolePolicy"));
__export(require("./rolePolicyAttachment"));
__export(require("./samlProvider"));
__export(require("./serverCertificate"));
__export(require("./serviceLinkedRole"));
__export(require("./sshKey"));
__export(require("./user"));
__export(require("./userGroupMembership"));
__export(require("./userLoginProfile"));
__export(require("./userPolicy"));
__export(require("./userPolicyAttachment"));
// Export enums:
__export(require("../types/enums/iam"));
// Import resources to register:
const accessKey_1 = require("./accessKey");
const accountAlias_1 = require("./accountAlias");
const accountPasswordPolicy_1 = require("./accountPasswordPolicy");
const group_1 = require("./group");
const groupMembership_1 = require("./groupMembership");
const groupPolicy_1 = require("./groupPolicy");
const groupPolicyAttachment_1 = require("./groupPolicyAttachment");
const instanceProfile_1 = require("./instanceProfile");
const openIdConnectProvider_1 = require("./openIdConnectProvider");
const policy_1 = require("./policy");
const policyAttachment_1 = require("./policyAttachment");
const role_1 = require("./role");
const rolePolicy_1 = require("./rolePolicy");
const rolePolicyAttachment_1 = require("./rolePolicyAttachment");
const samlProvider_1 = require("./samlProvider");
const serverCertificate_1 = require("./serverCertificate");
const serviceLinkedRole_1 = require("./serviceLinkedRole");
const sshKey_1 = require("./sshKey");
const user_1 = require("./user");
const userGroupMembership_1 = require("./userGroupMembership");
const userLoginProfile_1 = require("./userLoginProfile");
const userPolicy_1 = require("./userPolicy");
const userPolicyAttachment_1 = require("./userPolicyAttachment");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:iam/accessKey:AccessKey":
                return new accessKey_1.AccessKey(name, undefined, { urn });
            case "aws:iam/accountAlias:AccountAlias":
                return new accountAlias_1.AccountAlias(name, undefined, { urn });
            case "aws:iam/accountPasswordPolicy:AccountPasswordPolicy":
                return new accountPasswordPolicy_1.AccountPasswordPolicy(name, undefined, { urn });
            case "aws:iam/group:Group":
                return new group_1.Group(name, undefined, { urn });
            case "aws:iam/groupMembership:GroupMembership":
                return new groupMembership_1.GroupMembership(name, undefined, { urn });
            case "aws:iam/groupPolicy:GroupPolicy":
                return new groupPolicy_1.GroupPolicy(name, undefined, { urn });
            case "aws:iam/groupPolicyAttachment:GroupPolicyAttachment":
                return new groupPolicyAttachment_1.GroupPolicyAttachment(name, undefined, { urn });
            case "aws:iam/instanceProfile:InstanceProfile":
                return new instanceProfile_1.InstanceProfile(name, undefined, { urn });
            case "aws:iam/openIdConnectProvider:OpenIdConnectProvider":
                return new openIdConnectProvider_1.OpenIdConnectProvider(name, undefined, { urn });
            case "aws:iam/policy:Policy":
                return new policy_1.Policy(name, undefined, { urn });
            case "aws:iam/policyAttachment:PolicyAttachment":
                return new policyAttachment_1.PolicyAttachment(name, undefined, { urn });
            case "aws:iam/role:Role":
                return new role_1.Role(name, undefined, { urn });
            case "aws:iam/rolePolicy:RolePolicy":
                return new rolePolicy_1.RolePolicy(name, undefined, { urn });
            case "aws:iam/rolePolicyAttachment:RolePolicyAttachment":
                return new rolePolicyAttachment_1.RolePolicyAttachment(name, undefined, { urn });
            case "aws:iam/samlProvider:SamlProvider":
                return new samlProvider_1.SamlProvider(name, undefined, { urn });
            case "aws:iam/serverCertificate:ServerCertificate":
                return new serverCertificate_1.ServerCertificate(name, undefined, { urn });
            case "aws:iam/serviceLinkedRole:ServiceLinkedRole":
                return new serviceLinkedRole_1.ServiceLinkedRole(name, undefined, { urn });
            case "aws:iam/sshKey:SshKey":
                return new sshKey_1.SshKey(name, undefined, { urn });
            case "aws:iam/user:User":
                return new user_1.User(name, undefined, { urn });
            case "aws:iam/userGroupMembership:UserGroupMembership":
                return new userGroupMembership_1.UserGroupMembership(name, undefined, { urn });
            case "aws:iam/userLoginProfile:UserLoginProfile":
                return new userLoginProfile_1.UserLoginProfile(name, undefined, { urn });
            case "aws:iam/userPolicy:UserPolicy":
                return new userPolicy_1.UserPolicy(name, undefined, { urn });
            case "aws:iam/userPolicyAttachment:UserPolicyAttachment":
                return new userPolicyAttachment_1.UserPolicyAttachment(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "iam/accessKey", _module);
pulumi.runtime.registerResourceModule("aws", "iam/accountAlias", _module);
pulumi.runtime.registerResourceModule("aws", "iam/accountPasswordPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "iam/group", _module);
pulumi.runtime.registerResourceModule("aws", "iam/groupMembership", _module);
pulumi.runtime.registerResourceModule("aws", "iam/groupPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "iam/groupPolicyAttachment", _module);
pulumi.runtime.registerResourceModule("aws", "iam/instanceProfile", _module);
pulumi.runtime.registerResourceModule("aws", "iam/openIdConnectProvider", _module);
pulumi.runtime.registerResourceModule("aws", "iam/policy", _module);
pulumi.runtime.registerResourceModule("aws", "iam/policyAttachment", _module);
pulumi.runtime.registerResourceModule("aws", "iam/role", _module);
pulumi.runtime.registerResourceModule("aws", "iam/rolePolicy", _module);
pulumi.runtime.registerResourceModule("aws", "iam/rolePolicyAttachment", _module);
pulumi.runtime.registerResourceModule("aws", "iam/samlProvider", _module);
pulumi.runtime.registerResourceModule("aws", "iam/serverCertificate", _module);
pulumi.runtime.registerResourceModule("aws", "iam/serviceLinkedRole", _module);
pulumi.runtime.registerResourceModule("aws", "iam/sshKey", _module);
pulumi.runtime.registerResourceModule("aws", "iam/user", _module);
pulumi.runtime.registerResourceModule("aws", "iam/userGroupMembership", _module);
pulumi.runtime.registerResourceModule("aws", "iam/userLoginProfile", _module);
pulumi.runtime.registerResourceModule("aws", "iam/userPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "iam/userPolicyAttachment", _module);
//# sourceMappingURL=index.js.map