import * as pulumi from "@pulumi/pulumi";
/**
 * `aws.ec2.Route` provides details about a specific Route.
 *
 * This resource can prove useful when finding the resource
 * associated with a CIDR. For example, finding the peering
 * connection associated with a CIDR value.
 *
 * ## Example Usage
 *
 * The following example shows how one might use a CIDR value to find a network interface id
 * and use this to create a data source of that network interface.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const config = new pulumi.Config();
 * const subnetId = config.requireObject("subnetId");
 * const selected = aws.ec2.getRouteTable({
 *     subnetId: subnetId,
 * });
 * const route = aws.ec2.getRoute({
 *     routeTableId: aws_route_table.selected.id,
 *     destinationCidrBlock: "10.0.1.0/24",
 * });
 * const interface = route.then(route => aws.ec2.getNetworkInterface({
 *     id: route.networkInterfaceId,
 * }));
 * ```
 */
export declare function getRoute(args: GetRouteArgs, opts?: pulumi.InvokeOptions): Promise<GetRouteResult>;
/**
 * A collection of arguments for invoking getRoute.
 */
export interface GetRouteArgs {
    /**
     * The CIDR block of the Route belonging to the Route Table.
     */
    readonly destinationCidrBlock?: string;
    /**
     * The IPv6 CIDR block of the Route belonging to the Route Table.
     */
    readonly destinationIpv6CidrBlock?: string;
    /**
     * The Egress Only Gateway ID of the Route belonging to the Route Table.
     */
    readonly egressOnlyGatewayId?: string;
    /**
     * The Gateway ID of the Route belonging to the Route Table.
     */
    readonly gatewayId?: string;
    /**
     * The Instance ID of the Route belonging to the Route Table.
     */
    readonly instanceId?: string;
    /**
     * The Local Gateway ID of the Route belonging to the Route Table.
     */
    readonly localGatewayId?: string;
    /**
     * The NAT Gateway ID of the Route belonging to the Route Table.
     */
    readonly natGatewayId?: string;
    /**
     * The Network Interface ID of the Route belonging to the Route Table.
     */
    readonly networkInterfaceId?: string;
    /**
     * The id of the specific Route Table containing the Route entry.
     */
    readonly routeTableId: string;
    /**
     * The EC2 Transit Gateway ID of the Route belonging to the Route Table.
     */
    readonly transitGatewayId?: string;
    /**
     * The VPC Peering Connection ID of the Route belonging to the Route Table.
     */
    readonly vpcPeeringConnectionId?: string;
}
/**
 * A collection of values returned by getRoute.
 */
export interface GetRouteResult {
    readonly destinationCidrBlock: string;
    readonly destinationIpv6CidrBlock: string;
    readonly egressOnlyGatewayId: string;
    readonly gatewayId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceId: string;
    readonly localGatewayId: string;
    readonly natGatewayId: string;
    readonly networkInterfaceId: string;
    readonly routeTableId: string;
    readonly transitGatewayId: string;
    readonly vpcPeeringConnectionId: string;
}
