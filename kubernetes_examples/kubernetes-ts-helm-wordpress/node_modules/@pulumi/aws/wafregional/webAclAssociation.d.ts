import * as pulumi from "@pulumi/pulumi";
/**
 * Manages an association with WAF Regional Web ACL.
 *
 * > **Note:** An Application Load Balancer can only be associated with one WAF Regional WebACL.
 *
 * ## Application Load Balancer Association Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const ipset = new aws.wafregional.IpSet("ipset", {ipSetDescriptors: [{
 *     type: "IPV4",
 *     value: "192.0.7.0/24",
 * }]});
 * const fooRule = new aws.wafregional.Rule("fooRule", {
 *     metricName: "tfWAFRule",
 *     predicates: [{
 *         dataId: ipset.id,
 *         negated: false,
 *         type: "IPMatch",
 *     }],
 * });
 * const fooWebAcl = new aws.wafregional.WebAcl("fooWebAcl", {
 *     metricName: "foo",
 *     defaultAction: {
 *         type: "ALLOW",
 *     },
 *     rules: [{
 *         action: {
 *             type: "BLOCK",
 *         },
 *         priority: 1,
 *         ruleId: fooRule.id,
 *     }],
 * });
 * const fooVpc = new aws.ec2.Vpc("fooVpc", {cidrBlock: "10.1.0.0/16"});
 * const available = aws.getAvailabilityZones({});
 * const fooSubnet = new aws.ec2.Subnet("fooSubnet", {
 *     vpcId: fooVpc.id,
 *     cidrBlock: "10.1.1.0/24",
 *     availabilityZone: available.then(available => available.names[0]),
 * });
 * const bar = new aws.ec2.Subnet("bar", {
 *     vpcId: fooVpc.id,
 *     cidrBlock: "10.1.2.0/24",
 *     availabilityZone: available.then(available => available.names[1]),
 * });
 * const fooLoadBalancer = new aws.alb.LoadBalancer("fooLoadBalancer", {
 *     internal: true,
 *     subnets: [
 *         fooSubnet.id,
 *         bar.id,
 *     ],
 * });
 * const fooWebAclAssociation = new aws.wafregional.WebAclAssociation("fooWebAclAssociation", {
 *     resourceArn: fooLoadBalancer.arn,
 *     webAclId: fooWebAcl.id,
 * });
 * ```
 *
 * ## API Gateway Association Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const ipset = new aws.wafregional.IpSet("ipset", {ipSetDescriptors: [{
 *     type: "IPV4",
 *     value: "192.0.7.0/24",
 * }]});
 * const fooRule = new aws.wafregional.Rule("fooRule", {
 *     metricName: "tfWAFRule",
 *     predicates: [{
 *         dataId: ipset.id,
 *         negated: false,
 *         type: "IPMatch",
 *     }],
 * });
 * const fooWebAcl = new aws.wafregional.WebAcl("fooWebAcl", {
 *     metricName: "foo",
 *     defaultAction: {
 *         type: "ALLOW",
 *     },
 *     rules: [{
 *         action: {
 *             type: "BLOCK",
 *         },
 *         priority: 1,
 *         ruleId: fooRule.id,
 *     }],
 * });
 * const testRestApi = new aws.apigateway.RestApi("testRestApi", {});
 * const testResource = new aws.apigateway.Resource("testResource", {
 *     parentId: testRestApi.rootResourceId,
 *     pathPart: "test",
 *     restApi: testRestApi.id,
 * });
 * const testMethod = new aws.apigateway.Method("testMethod", {
 *     authorization: "NONE",
 *     httpMethod: "GET",
 *     resourceId: testResource.id,
 *     restApi: testRestApi.id,
 * });
 * const testMethodResponse = new aws.apigateway.MethodResponse("testMethodResponse", {
 *     httpMethod: testMethod.httpMethod,
 *     resourceId: testResource.id,
 *     restApi: testRestApi.id,
 *     statusCode: "400",
 * });
 * const testIntegration = new aws.apigateway.Integration("testIntegration", {
 *     httpMethod: testMethod.httpMethod,
 *     integrationHttpMethod: "GET",
 *     resourceId: testResource.id,
 *     restApi: testRestApi.id,
 *     type: "HTTP",
 *     uri: "http://www.example.com",
 * });
 * const testIntegrationResponse = new aws.apigateway.IntegrationResponse("testIntegrationResponse", {
 *     restApi: testRestApi.id,
 *     resourceId: testResource.id,
 *     httpMethod: testIntegration.httpMethod,
 *     statusCode: testMethodResponse.statusCode,
 * });
 * const testDeployment = new aws.apigateway.Deployment("testDeployment", {restApi: testRestApi.id}, {
 *     dependsOn: [testIntegrationResponse],
 * });
 * const testStage = new aws.apigateway.Stage("testStage", {
 *     deployment: testDeployment.id,
 *     restApi: testRestApi.id,
 *     stageName: "test",
 * });
 * const association = new aws.wafregional.WebAclAssociation("association", {
 *     resourceArn: testStage.arn,
 *     webAclId: fooWebAcl.id,
 * });
 * ```
 *
 * ## Import
 *
 * WAF Regional Web ACL Association can be imported using their `web_acl_id:resource_arn`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:wafregional/webAclAssociation:WebAclAssociation foo web_acl_id:resource_arn
 * ```
 */
export declare class WebAclAssociation extends pulumi.CustomResource {
    /**
     * Get an existing WebAclAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebAclAssociationState, opts?: pulumi.CustomResourceOptions): WebAclAssociation;
    /**
     * Returns true if the given object is an instance of WebAclAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is WebAclAssociation;
    /**
     * ARN of the resource to associate with. For example, an Application Load Balancer or API Gateway Stage.
     */
    readonly resourceArn: pulumi.Output<string>;
    /**
     * The ID of the WAF Regional WebACL to create an association.
     */
    readonly webAclId: pulumi.Output<string>;
    /**
     * Create a WebAclAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebAclAssociationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering WebAclAssociation resources.
 */
export interface WebAclAssociationState {
    /**
     * ARN of the resource to associate with. For example, an Application Load Balancer or API Gateway Stage.
     */
    readonly resourceArn?: pulumi.Input<string>;
    /**
     * The ID of the WAF Regional WebACL to create an association.
     */
    readonly webAclId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a WebAclAssociation resource.
 */
export interface WebAclAssociationArgs {
    /**
     * ARN of the resource to associate with. For example, an Application Load Balancer or API Gateway Stage.
     */
    readonly resourceArn: pulumi.Input<string>;
    /**
     * The ID of the WAF Regional WebACL to create an association.
     */
    readonly webAclId: pulumi.Input<string>;
}
