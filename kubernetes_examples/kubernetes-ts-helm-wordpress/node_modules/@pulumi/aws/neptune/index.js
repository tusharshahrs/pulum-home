"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./cluster"));
__export(require("./clusterInstance"));
__export(require("./clusterParameterGroup"));
__export(require("./clusterSnapshot"));
__export(require("./eventSubscription"));
__export(require("./getEngineVersion"));
__export(require("./getOrderableDbInstance"));
__export(require("./parameterGroup"));
__export(require("./subnetGroup"));
// Import resources to register:
const cluster_1 = require("./cluster");
const clusterInstance_1 = require("./clusterInstance");
const clusterParameterGroup_1 = require("./clusterParameterGroup");
const clusterSnapshot_1 = require("./clusterSnapshot");
const eventSubscription_1 = require("./eventSubscription");
const parameterGroup_1 = require("./parameterGroup");
const subnetGroup_1 = require("./subnetGroup");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:neptune/cluster:Cluster":
                return new cluster_1.Cluster(name, undefined, { urn });
            case "aws:neptune/clusterInstance:ClusterInstance":
                return new clusterInstance_1.ClusterInstance(name, undefined, { urn });
            case "aws:neptune/clusterParameterGroup:ClusterParameterGroup":
                return new clusterParameterGroup_1.ClusterParameterGroup(name, undefined, { urn });
            case "aws:neptune/clusterSnapshot:ClusterSnapshot":
                return new clusterSnapshot_1.ClusterSnapshot(name, undefined, { urn });
            case "aws:neptune/eventSubscription:EventSubscription":
                return new eventSubscription_1.EventSubscription(name, undefined, { urn });
            case "aws:neptune/parameterGroup:ParameterGroup":
                return new parameterGroup_1.ParameterGroup(name, undefined, { urn });
            case "aws:neptune/subnetGroup:SubnetGroup":
                return new subnetGroup_1.SubnetGroup(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "neptune/cluster", _module);
pulumi.runtime.registerResourceModule("aws", "neptune/clusterInstance", _module);
pulumi.runtime.registerResourceModule("aws", "neptune/clusterParameterGroup", _module);
pulumi.runtime.registerResourceModule("aws", "neptune/clusterSnapshot", _module);
pulumi.runtime.registerResourceModule("aws", "neptune/eventSubscription", _module);
pulumi.runtime.registerResourceModule("aws", "neptune/parameterGroup", _module);
pulumi.runtime.registerResourceModule("aws", "neptune/subnetGroup", _module);
//# sourceMappingURL=index.js.map