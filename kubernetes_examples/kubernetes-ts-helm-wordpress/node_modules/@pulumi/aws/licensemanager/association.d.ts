import * as pulumi from "@pulumi/pulumi";
/**
 * Provides a License Manager association.
 *
 * > **Note:** License configurations can also be associated with launch templates by specifying the `licenseSpecifications` block for an `aws.ec2.LaunchTemplate`.
 *
 * ## Import
 *
 * License configurations can be imported in the form `resource_arn,license_configuration_arn`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:licensemanager/association:Association example arn:aws:ec2:eu-west-1:123456789012:image/ami-123456789abcdef01,arn:aws:license-manager:eu-west-1:123456789012:license-configuration:lic-0123456789abcdef0123456789abcdef
 * ```
 */
export declare class Association extends pulumi.CustomResource {
    /**
     * Get an existing Association resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AssociationState, opts?: pulumi.CustomResourceOptions): Association;
    /**
     * Returns true if the given object is an instance of Association.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Association;
    /**
     * ARN of the license configuration.
     */
    readonly licenseConfigurationArn: pulumi.Output<string>;
    /**
     * ARN of the resource associated with the license configuration.
     */
    readonly resourceArn: pulumi.Output<string>;
    /**
     * Create a Association resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AssociationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Association resources.
 */
export interface AssociationState {
    /**
     * ARN of the license configuration.
     */
    readonly licenseConfigurationArn?: pulumi.Input<string>;
    /**
     * ARN of the resource associated with the license configuration.
     */
    readonly resourceArn?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Association resource.
 */
export interface AssociationArgs {
    /**
     * ARN of the license configuration.
     */
    readonly licenseConfigurationArn: pulumi.Input<string>;
    /**
     * ARN of the resource associated with the license configuration.
     */
    readonly resourceArn: pulumi.Input<string>;
}
