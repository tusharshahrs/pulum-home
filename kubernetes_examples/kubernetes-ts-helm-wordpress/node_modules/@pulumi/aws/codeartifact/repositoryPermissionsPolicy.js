"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a CodeArtifact Repostory Permissions Policy Resource.
 *
 * ## Import
 *
 * CodeArtifact Repository Permissions Policies can be imported using the CodeArtifact Repository ARN, e.g.
 *
 * ```sh
 *  $ pulumi import aws:codeartifact/repositoryPermissionsPolicy:RepositoryPermissionsPolicy example arn:aws:codeartifact:us-west-2:012345678912:repository/tf-acc-test-6968272603913957763/tf-acc-test-6968272603913957763
 * ```
 */
class RepositoryPermissionsPolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["domain"] = state ? state.domain : undefined;
            inputs["domainOwner"] = state ? state.domainOwner : undefined;
            inputs["policyDocument"] = state ? state.policyDocument : undefined;
            inputs["policyRevision"] = state ? state.policyRevision : undefined;
            inputs["repository"] = state ? state.repository : undefined;
            inputs["resourceArn"] = state ? state.resourceArn : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.domain === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.policyDocument === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'policyDocument'");
            }
            if ((!args || args.repository === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'repository'");
            }
            inputs["domain"] = args ? args.domain : undefined;
            inputs["domainOwner"] = args ? args.domainOwner : undefined;
            inputs["policyDocument"] = args ? args.policyDocument : undefined;
            inputs["policyRevision"] = args ? args.policyRevision : undefined;
            inputs["repository"] = args ? args.repository : undefined;
            inputs["resourceArn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(RepositoryPermissionsPolicy.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing RepositoryPermissionsPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RepositoryPermissionsPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RepositoryPermissionsPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryPermissionsPolicy.__pulumiType;
    }
}
exports.RepositoryPermissionsPolicy = RepositoryPermissionsPolicy;
/** @internal */
RepositoryPermissionsPolicy.__pulumiType = 'aws:codeartifact/repositoryPermissionsPolicy:RepositoryPermissionsPolicy';
//# sourceMappingURL=repositoryPermissionsPolicy.js.map