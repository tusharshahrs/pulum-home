import * as pulumi from "@pulumi/pulumi";
import { enums } from "../types";
/**
 * Provides an SSM Parameter resource.
 *
 * ## Example Usage
 *
 * To store a basic string parameter:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const foo = new aws.ssm.Parameter("foo", {
 *     type: "String",
 *     value: "bar",
 * });
 * ```
 *
 * To store an encrypted string using the default SSM KMS key:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const _default = new aws.rds.Instance("default", {
 *     allocatedStorage: 10,
 *     storageType: "gp2",
 *     engine: "mysql",
 *     engineVersion: "5.7.16",
 *     instanceClass: "db.t2.micro",
 *     name: "mydb",
 *     username: "foo",
 *     password: _var.database_master_password,
 *     dbSubnetGroupName: "my_database_subnet_group",
 *     parameterGroupName: "default.mysql5.7",
 * });
 * const secret = new aws.ssm.Parameter("secret", {
 *     description: "The parameter description",
 *     type: "SecureString",
 *     value: _var.database_master_password,
 *     tags: {
 *         environment: "production",
 *     },
 * });
 * ```
 *
 * > **Note:** The unencrypted value of a SecureString will be stored in the raw state as plain-text.
 *
 * ## Import
 *
 * SSM Parameters can be imported using the `parameter store name`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:ssm/parameter:Parameter my_param /my_path/my_paramname
 * ```
 */
export declare class Parameter extends pulumi.CustomResource {
    /**
     * Get an existing Parameter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ParameterState, opts?: pulumi.CustomResourceOptions): Parameter;
    /**
     * Returns true if the given object is an instance of Parameter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Parameter;
    /**
     * A regular expression used to validate the parameter value.
     */
    readonly allowedPattern: pulumi.Output<string | undefined>;
    /**
     * The ARN of the parameter.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The dataType of the parameter. Valid values: text and aws:ec2:image for AMI format, see the [Native parameter support for Amazon Machine Image IDs
     * ](https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-ec2-aliases.html)
     */
    readonly dataType: pulumi.Output<string>;
    /**
     * The description of the parameter.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The KMS key id or arn for encrypting a SecureString.
     */
    readonly keyId: pulumi.Output<string>;
    /**
     * The name of the parameter. If the name contains a path (e.g. any forward slashes (`/`)), it must be fully qualified with a leading forward slash (`/`). For additional requirements and constraints, see the [AWS SSM User Guide](https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-parameter-name-constraints.html).
     */
    readonly name: pulumi.Output<string>;
    /**
     * Overwrite an existing parameter. If not specified, will default to `false` if the resource has not been created by this provider to avoid overwrite of existing resource and will default to `true` otherwise (lifecycle rules should then be used to manage the update behavior).
     */
    readonly overwrite: pulumi.Output<boolean | undefined>;
    /**
     * A map of tags to assign to the object.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The tier of the parameter. If not specified, will default to `Standard`. Valid tiers are `Standard` and `Advanced`. For more information on parameter tiers, see the [AWS SSM Parameter tier comparison and guide](https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-advanced-parameters.html).
     */
    readonly tier: pulumi.Output<string | undefined>;
    /**
     * The type of the parameter. Valid types are `String`, `StringList` and `SecureString`.
     */
    readonly type: pulumi.Output<string>;
    /**
     * The value of the parameter.
     */
    readonly value: pulumi.Output<string>;
    /**
     * The version of the parameter.
     */
    readonly version: pulumi.Output<number>;
    /**
     * Create a Parameter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ParameterArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Parameter resources.
 */
export interface ParameterState {
    /**
     * A regular expression used to validate the parameter value.
     */
    readonly allowedPattern?: pulumi.Input<string>;
    /**
     * The ARN of the parameter.
     */
    readonly arn?: pulumi.Input<string>;
    /**
     * The dataType of the parameter. Valid values: text and aws:ec2:image for AMI format, see the [Native parameter support for Amazon Machine Image IDs
     * ](https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-ec2-aliases.html)
     */
    readonly dataType?: pulumi.Input<string>;
    /**
     * The description of the parameter.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The KMS key id or arn for encrypting a SecureString.
     */
    readonly keyId?: pulumi.Input<string>;
    /**
     * The name of the parameter. If the name contains a path (e.g. any forward slashes (`/`)), it must be fully qualified with a leading forward slash (`/`). For additional requirements and constraints, see the [AWS SSM User Guide](https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-parameter-name-constraints.html).
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Overwrite an existing parameter. If not specified, will default to `false` if the resource has not been created by this provider to avoid overwrite of existing resource and will default to `true` otherwise (lifecycle rules should then be used to manage the update behavior).
     */
    readonly overwrite?: pulumi.Input<boolean>;
    /**
     * A map of tags to assign to the object.
     */
    readonly tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The tier of the parameter. If not specified, will default to `Standard`. Valid tiers are `Standard` and `Advanced`. For more information on parameter tiers, see the [AWS SSM Parameter tier comparison and guide](https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-advanced-parameters.html).
     */
    readonly tier?: pulumi.Input<string>;
    /**
     * The type of the parameter. Valid types are `String`, `StringList` and `SecureString`.
     */
    readonly type?: pulumi.Input<string | enums.ssm.ParameterType>;
    /**
     * The value of the parameter.
     */
    readonly value?: pulumi.Input<string>;
    /**
     * The version of the parameter.
     */
    readonly version?: pulumi.Input<number>;
}
/**
 * The set of arguments for constructing a Parameter resource.
 */
export interface ParameterArgs {
    /**
     * A regular expression used to validate the parameter value.
     */
    readonly allowedPattern?: pulumi.Input<string>;
    /**
     * The ARN of the parameter.
     */
    readonly arn?: pulumi.Input<string>;
    /**
     * The dataType of the parameter. Valid values: text and aws:ec2:image for AMI format, see the [Native parameter support for Amazon Machine Image IDs
     * ](https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-ec2-aliases.html)
     */
    readonly dataType?: pulumi.Input<string>;
    /**
     * The description of the parameter.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The KMS key id or arn for encrypting a SecureString.
     */
    readonly keyId?: pulumi.Input<string>;
    /**
     * The name of the parameter. If the name contains a path (e.g. any forward slashes (`/`)), it must be fully qualified with a leading forward slash (`/`). For additional requirements and constraints, see the [AWS SSM User Guide](https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-parameter-name-constraints.html).
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Overwrite an existing parameter. If not specified, will default to `false` if the resource has not been created by this provider to avoid overwrite of existing resource and will default to `true` otherwise (lifecycle rules should then be used to manage the update behavior).
     */
    readonly overwrite?: pulumi.Input<boolean>;
    /**
     * A map of tags to assign to the object.
     */
    readonly tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The tier of the parameter. If not specified, will default to `Standard`. Valid tiers are `Standard` and `Advanced`. For more information on parameter tiers, see the [AWS SSM Parameter tier comparison and guide](https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-advanced-parameters.html).
     */
    readonly tier?: pulumi.Input<string>;
    /**
     * The type of the parameter. Valid types are `String`, `StringList` and `SecureString`.
     */
    readonly type: pulumi.Input<string | enums.ssm.ParameterType>;
    /**
     * The value of the parameter.
     */
    readonly value: pulumi.Input<string>;
}
