"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./getUserPools"));
__export(require("./identityPool"));
__export(require("./identityPoolRoleAttachment"));
__export(require("./identityProvider"));
__export(require("./resourceServer"));
__export(require("./userGroup"));
__export(require("./userPool"));
__export(require("./userPoolClient"));
__export(require("./userPoolDomain"));
// Import resources to register:
const identityPool_1 = require("./identityPool");
const identityPoolRoleAttachment_1 = require("./identityPoolRoleAttachment");
const identityProvider_1 = require("./identityProvider");
const resourceServer_1 = require("./resourceServer");
const userGroup_1 = require("./userGroup");
const userPool_1 = require("./userPool");
const userPoolClient_1 = require("./userPoolClient");
const userPoolDomain_1 = require("./userPoolDomain");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:cognito/identityPool:IdentityPool":
                return new identityPool_1.IdentityPool(name, undefined, { urn });
            case "aws:cognito/identityPoolRoleAttachment:IdentityPoolRoleAttachment":
                return new identityPoolRoleAttachment_1.IdentityPoolRoleAttachment(name, undefined, { urn });
            case "aws:cognito/identityProvider:IdentityProvider":
                return new identityProvider_1.IdentityProvider(name, undefined, { urn });
            case "aws:cognito/resourceServer:ResourceServer":
                return new resourceServer_1.ResourceServer(name, undefined, { urn });
            case "aws:cognito/userGroup:UserGroup":
                return new userGroup_1.UserGroup(name, undefined, { urn });
            case "aws:cognito/userPool:UserPool":
                return new userPool_1.UserPool(name, undefined, { urn });
            case "aws:cognito/userPoolClient:UserPoolClient":
                return new userPoolClient_1.UserPoolClient(name, undefined, { urn });
            case "aws:cognito/userPoolDomain:UserPoolDomain":
                return new userPoolDomain_1.UserPoolDomain(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "cognito/identityPool", _module);
pulumi.runtime.registerResourceModule("aws", "cognito/identityPoolRoleAttachment", _module);
pulumi.runtime.registerResourceModule("aws", "cognito/identityProvider", _module);
pulumi.runtime.registerResourceModule("aws", "cognito/resourceServer", _module);
pulumi.runtime.registerResourceModule("aws", "cognito/userGroup", _module);
pulumi.runtime.registerResourceModule("aws", "cognito/userPool", _module);
pulumi.runtime.registerResourceModule("aws", "cognito/userPoolClient", _module);
pulumi.runtime.registerResourceModule("aws", "cognito/userPoolDomain", _module);
//# sourceMappingURL=index.js.map