"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./aggregateAuthorization"));
__export(require("./configurationAggregator"));
__export(require("./deliveryChannel"));
__export(require("./organizationCustomRule"));
__export(require("./organizationManagedRule"));
__export(require("./recorder"));
__export(require("./recorderStatus"));
__export(require("./remediationConfiguration"));
__export(require("./rule"));
// Import resources to register:
const aggregateAuthorization_1 = require("./aggregateAuthorization");
const configurationAggregator_1 = require("./configurationAggregator");
const deliveryChannel_1 = require("./deliveryChannel");
const organizationCustomRule_1 = require("./organizationCustomRule");
const organizationManagedRule_1 = require("./organizationManagedRule");
const recorder_1 = require("./recorder");
const recorderStatus_1 = require("./recorderStatus");
const remediationConfiguration_1 = require("./remediationConfiguration");
const rule_1 = require("./rule");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:cfg/aggregateAuthorization:AggregateAuthorization":
                return new aggregateAuthorization_1.AggregateAuthorization(name, undefined, { urn });
            case "aws:cfg/configurationAggregator:ConfigurationAggregator":
                return new configurationAggregator_1.ConfigurationAggregator(name, undefined, { urn });
            case "aws:cfg/deliveryChannel:DeliveryChannel":
                return new deliveryChannel_1.DeliveryChannel(name, undefined, { urn });
            case "aws:cfg/organizationCustomRule:OrganizationCustomRule":
                return new organizationCustomRule_1.OrganizationCustomRule(name, undefined, { urn });
            case "aws:cfg/organizationManagedRule:OrganizationManagedRule":
                return new organizationManagedRule_1.OrganizationManagedRule(name, undefined, { urn });
            case "aws:cfg/recorder:Recorder":
                return new recorder_1.Recorder(name, undefined, { urn });
            case "aws:cfg/recorderStatus:RecorderStatus":
                return new recorderStatus_1.RecorderStatus(name, undefined, { urn });
            case "aws:cfg/remediationConfiguration:RemediationConfiguration":
                return new remediationConfiguration_1.RemediationConfiguration(name, undefined, { urn });
            case "aws:cfg/rule:Rule":
                return new rule_1.Rule(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "cfg/aggregateAuthorization", _module);
pulumi.runtime.registerResourceModule("aws", "cfg/configurationAggregator", _module);
pulumi.runtime.registerResourceModule("aws", "cfg/deliveryChannel", _module);
pulumi.runtime.registerResourceModule("aws", "cfg/organizationCustomRule", _module);
pulumi.runtime.registerResourceModule("aws", "cfg/organizationManagedRule", _module);
pulumi.runtime.registerResourceModule("aws", "cfg/recorder", _module);
pulumi.runtime.registerResourceModule("aws", "cfg/recorderStatus", _module);
pulumi.runtime.registerResourceModule("aws", "cfg/remediationConfiguration", _module);
pulumi.runtime.registerResourceModule("aws", "cfg/rule", _module);
//# sourceMappingURL=index.js.map