import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import { LaunchConfiguration, PlacementGroup } from "../ec2";
import { Metric } from "./index";
/**
 * ## Import
 *
 * AutoScaling Groups can be imported using the `name`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:autoscaling/group:Group web web-asg
 * ```
 */
export declare class Group extends pulumi.CustomResource {
    /**
     * Get an existing Group resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupState, opts?: pulumi.CustomResourceOptions): Group;
    /**
     * Returns true if the given object is an instance of Group.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Group;
    /**
     * The ARN for this AutoScaling Group
     */
    readonly arn: pulumi.Output<string>;
    /**
     * A list of one or more availability zones for the group. Used for EC2-Classic and default subnets when not specified with `vpcZoneIdentifier` argument. Conflicts with `vpcZoneIdentifier`.
     */
    readonly availabilityZones: pulumi.Output<string[]>;
    /**
     * Indicates whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
     */
    readonly capacityRebalance: pulumi.Output<boolean | undefined>;
    /**
     * The amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
     */
    readonly defaultCooldown: pulumi.Output<number>;
    /**
     * The number of Amazon EC2 instances that
     * should be running in the group. (See also Waiting for
     * Capacity below.)
     */
    readonly desiredCapacity: pulumi.Output<number>;
    /**
     * A list of metrics to collect. The allowed values are `GroupDesiredCapacity`, `GroupInServiceCapacity`, `GroupPendingCapacity`, `GroupMinSize`, `GroupMaxSize`, `GroupInServiceInstances`, `GroupPendingInstances`, `GroupStandbyInstances`, `GroupStandbyCapacity`, `GroupTerminatingCapacity`, `GroupTerminatingInstances`, `GroupTotalCapacity`, `GroupTotalInstances`.
     */
    readonly enabledMetrics: pulumi.Output<Metric[] | undefined>;
    /**
     * Allows deleting the autoscaling group without waiting
     * for all instances in the pool to terminate.  You can force an autoscaling group to delete
     * even if it's in the process of scaling a resource. Normally, this provider
     * drains all the instances before deleting the group.  This bypasses that
     * behavior and potentially leaves resources dangling.
     */
    readonly forceDelete: pulumi.Output<boolean | undefined>;
    /**
     * Time (in seconds) after instance comes into service before checking health.
     */
    readonly healthCheckGracePeriod: pulumi.Output<number | undefined>;
    /**
     * "EC2" or "ELB". Controls how health checking is done.
     */
    readonly healthCheckType: pulumi.Output<string>;
    /**
     * One or more
     * [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
     * to attach to the autoscaling group **before** instances are launched. The
     * syntax is exactly the same as the separate
     * `aws.autoscaling.LifecycleHook`
     * resource, without the `autoscalingGroupName` attribute. Please note that this will only work when creating
     * a new autoscaling group. For all other use-cases, please use `aws.autoscaling.LifecycleHook` resource.
     */
    readonly initialLifecycleHooks: pulumi.Output<outputs.autoscaling.GroupInitialLifecycleHook[] | undefined>;
    /**
     * The name of the launch configuration to use.
     */
    readonly launchConfiguration: pulumi.Output<string | undefined>;
    /**
     * Nested argument containing launch template settings along with the overrides to specify multiple instance types and weights. Defined below.
     */
    readonly launchTemplate: pulumi.Output<outputs.autoscaling.GroupLaunchTemplate | undefined>;
    /**
     * A list of elastic load balancer names to add to the autoscaling
     * group names. Only valid for classic load balancers. For ALBs, use `targetGroupArns` instead.
     */
    readonly loadBalancers: pulumi.Output<string[] | undefined>;
    /**
     * The maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 604800 and 31536000 seconds.
     */
    readonly maxInstanceLifetime: pulumi.Output<number | undefined>;
    /**
     * The maximum size of the auto scale group.
     */
    readonly maxSize: pulumi.Output<number>;
    /**
     * The granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
     */
    readonly metricsGranularity: pulumi.Output<string | undefined>;
    /**
     * Setting this causes this provider to wait for
     * this number of instances from this autoscaling group to show up healthy in the
     * ELB only on creation. Updates will not wait on ELB instance number changes.
     * (See also Waiting for Capacity below.)
     */
    readonly minElbCapacity: pulumi.Output<number | undefined>;
    /**
     * The minimum size of the auto scale group.
     * (See also Waiting for Capacity below.)
     */
    readonly minSize: pulumi.Output<number>;
    /**
     * Configuration block containing settings to define launch targets for Auto Scaling groups. Defined below.
     */
    readonly mixedInstancesPolicy: pulumi.Output<outputs.autoscaling.GroupMixedInstancesPolicy | undefined>;
    /**
     * The name of the auto scaling group. By default generated by this provider.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Creates a unique name beginning with the specified
     * prefix. Conflicts with `name`.
     */
    readonly namePrefix: pulumi.Output<string | undefined>;
    /**
     * The name of the placement group into which you'll launch your instances, if any.
     */
    readonly placementGroup: pulumi.Output<string | undefined>;
    /**
     * Allows setting instance protection. The
     * autoscaling group will not select instances with this setting for termination
     * during scale in events.
     */
    readonly protectFromScaleIn: pulumi.Output<boolean | undefined>;
    /**
     * The ARN of the service-linked role that the ASG will use to call other AWS services
     */
    readonly serviceLinkedRoleArn: pulumi.Output<string>;
    /**
     * A list of processes to suspend for the AutoScaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`.
     * Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your autoscaling group from functioning properly.
     */
    readonly suspendedProcesses: pulumi.Output<string[] | undefined>;
    /**
     * Configuration block(s) containing resource tags. Conflicts with `tags`. Documented below.
     */
    readonly tags: pulumi.Output<outputs.autoscaling.GroupTag[] | undefined>;
    /**
     * Set of maps containing resource tags. Conflicts with `tag`. Documented below.
     */
    readonly tagsCollection: pulumi.Output<{
        [key: string]: string;
    }[] | undefined>;
    /**
     * A set of `aws.alb.TargetGroup` ARNs, for use with Application or Network Load Balancing.
     */
    readonly targetGroupArns: pulumi.Output<string[] | undefined>;
    /**
     * A list of policies to decide how the instances in the auto scale group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`.
     */
    readonly terminationPolicies: pulumi.Output<string[] | undefined>;
    /**
     * A list of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availabilityZones`.
     */
    readonly vpcZoneIdentifiers: pulumi.Output<string[]>;
    /**
     * A maximum
     * [duration](https://golang.org/pkg/time/#ParseDuration) that this provider should
     * wait for ASG instances to be healthy before timing out.  (See also Waiting
     * for Capacity below.) Setting this to "0" causes
     * this provider to skip all Capacity Waiting behavior.
     */
    readonly waitForCapacityTimeout: pulumi.Output<string | undefined>;
    /**
     * Setting this will cause this provider to wait
     * for exactly this number of healthy instances from this autoscaling group in
     * all attached load balancers on both create and update operations. (Takes
     * precedence over `minElbCapacity` behavior.)
     * (See also Waiting for Capacity below.)
     */
    readonly waitForElbCapacity: pulumi.Output<number | undefined>;
    /**
     * Create a Group resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Group resources.
 */
export interface GroupState {
    /**
     * The ARN for this AutoScaling Group
     */
    readonly arn?: pulumi.Input<string>;
    /**
     * A list of one or more availability zones for the group. Used for EC2-Classic and default subnets when not specified with `vpcZoneIdentifier` argument. Conflicts with `vpcZoneIdentifier`.
     */
    readonly availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
     */
    readonly capacityRebalance?: pulumi.Input<boolean>;
    /**
     * The amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
     */
    readonly defaultCooldown?: pulumi.Input<number>;
    /**
     * The number of Amazon EC2 instances that
     * should be running in the group. (See also Waiting for
     * Capacity below.)
     */
    readonly desiredCapacity?: pulumi.Input<number>;
    /**
     * A list of metrics to collect. The allowed values are `GroupDesiredCapacity`, `GroupInServiceCapacity`, `GroupPendingCapacity`, `GroupMinSize`, `GroupMaxSize`, `GroupInServiceInstances`, `GroupPendingInstances`, `GroupStandbyInstances`, `GroupStandbyCapacity`, `GroupTerminatingCapacity`, `GroupTerminatingInstances`, `GroupTotalCapacity`, `GroupTotalInstances`.
     */
    readonly enabledMetrics?: pulumi.Input<pulumi.Input<Metric>[]>;
    /**
     * Allows deleting the autoscaling group without waiting
     * for all instances in the pool to terminate.  You can force an autoscaling group to delete
     * even if it's in the process of scaling a resource. Normally, this provider
     * drains all the instances before deleting the group.  This bypasses that
     * behavior and potentially leaves resources dangling.
     */
    readonly forceDelete?: pulumi.Input<boolean>;
    /**
     * Time (in seconds) after instance comes into service before checking health.
     */
    readonly healthCheckGracePeriod?: pulumi.Input<number>;
    /**
     * "EC2" or "ELB". Controls how health checking is done.
     */
    readonly healthCheckType?: pulumi.Input<string>;
    /**
     * One or more
     * [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
     * to attach to the autoscaling group **before** instances are launched. The
     * syntax is exactly the same as the separate
     * `aws.autoscaling.LifecycleHook`
     * resource, without the `autoscalingGroupName` attribute. Please note that this will only work when creating
     * a new autoscaling group. For all other use-cases, please use `aws.autoscaling.LifecycleHook` resource.
     */
    readonly initialLifecycleHooks?: pulumi.Input<pulumi.Input<inputs.autoscaling.GroupInitialLifecycleHook>[]>;
    /**
     * The name of the launch configuration to use.
     */
    readonly launchConfiguration?: pulumi.Input<string | LaunchConfiguration>;
    /**
     * Nested argument containing launch template settings along with the overrides to specify multiple instance types and weights. Defined below.
     */
    readonly launchTemplate?: pulumi.Input<inputs.autoscaling.GroupLaunchTemplate>;
    /**
     * A list of elastic load balancer names to add to the autoscaling
     * group names. Only valid for classic load balancers. For ALBs, use `targetGroupArns` instead.
     */
    readonly loadBalancers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 604800 and 31536000 seconds.
     */
    readonly maxInstanceLifetime?: pulumi.Input<number>;
    /**
     * The maximum size of the auto scale group.
     */
    readonly maxSize?: pulumi.Input<number>;
    /**
     * The granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
     */
    readonly metricsGranularity?: pulumi.Input<string | enums.autoscaling.MetricsGranularity>;
    /**
     * Setting this causes this provider to wait for
     * this number of instances from this autoscaling group to show up healthy in the
     * ELB only on creation. Updates will not wait on ELB instance number changes.
     * (See also Waiting for Capacity below.)
     */
    readonly minElbCapacity?: pulumi.Input<number>;
    /**
     * The minimum size of the auto scale group.
     * (See also Waiting for Capacity below.)
     */
    readonly minSize?: pulumi.Input<number>;
    /**
     * Configuration block containing settings to define launch targets for Auto Scaling groups. Defined below.
     */
    readonly mixedInstancesPolicy?: pulumi.Input<inputs.autoscaling.GroupMixedInstancesPolicy>;
    /**
     * The name of the auto scaling group. By default generated by this provider.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Creates a unique name beginning with the specified
     * prefix. Conflicts with `name`.
     */
    readonly namePrefix?: pulumi.Input<string>;
    /**
     * The name of the placement group into which you'll launch your instances, if any.
     */
    readonly placementGroup?: pulumi.Input<string | PlacementGroup>;
    /**
     * Allows setting instance protection. The
     * autoscaling group will not select instances with this setting for termination
     * during scale in events.
     */
    readonly protectFromScaleIn?: pulumi.Input<boolean>;
    /**
     * The ARN of the service-linked role that the ASG will use to call other AWS services
     */
    readonly serviceLinkedRoleArn?: pulumi.Input<string>;
    /**
     * A list of processes to suspend for the AutoScaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`.
     * Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your autoscaling group from functioning properly.
     */
    readonly suspendedProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration block(s) containing resource tags. Conflicts with `tags`. Documented below.
     */
    readonly tags?: pulumi.Input<pulumi.Input<inputs.autoscaling.GroupTag>[]>;
    /**
     * Set of maps containing resource tags. Conflicts with `tag`. Documented below.
     */
    readonly tagsCollection?: pulumi.Input<pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>[]>;
    /**
     * A set of `aws.alb.TargetGroup` ARNs, for use with Application or Network Load Balancing.
     */
    readonly targetGroupArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of policies to decide how the instances in the auto scale group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`.
     */
    readonly terminationPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availabilityZones`.
     */
    readonly vpcZoneIdentifiers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A maximum
     * [duration](https://golang.org/pkg/time/#ParseDuration) that this provider should
     * wait for ASG instances to be healthy before timing out.  (See also Waiting
     * for Capacity below.) Setting this to "0" causes
     * this provider to skip all Capacity Waiting behavior.
     */
    readonly waitForCapacityTimeout?: pulumi.Input<string>;
    /**
     * Setting this will cause this provider to wait
     * for exactly this number of healthy instances from this autoscaling group in
     * all attached load balancers on both create and update operations. (Takes
     * precedence over `minElbCapacity` behavior.)
     * (See also Waiting for Capacity below.)
     */
    readonly waitForElbCapacity?: pulumi.Input<number>;
}
/**
 * The set of arguments for constructing a Group resource.
 */
export interface GroupArgs {
    /**
     * A list of one or more availability zones for the group. Used for EC2-Classic and default subnets when not specified with `vpcZoneIdentifier` argument. Conflicts with `vpcZoneIdentifier`.
     */
    readonly availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
     */
    readonly capacityRebalance?: pulumi.Input<boolean>;
    /**
     * The amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
     */
    readonly defaultCooldown?: pulumi.Input<number>;
    /**
     * The number of Amazon EC2 instances that
     * should be running in the group. (See also Waiting for
     * Capacity below.)
     */
    readonly desiredCapacity?: pulumi.Input<number>;
    /**
     * A list of metrics to collect. The allowed values are `GroupDesiredCapacity`, `GroupInServiceCapacity`, `GroupPendingCapacity`, `GroupMinSize`, `GroupMaxSize`, `GroupInServiceInstances`, `GroupPendingInstances`, `GroupStandbyInstances`, `GroupStandbyCapacity`, `GroupTerminatingCapacity`, `GroupTerminatingInstances`, `GroupTotalCapacity`, `GroupTotalInstances`.
     */
    readonly enabledMetrics?: pulumi.Input<pulumi.Input<Metric>[]>;
    /**
     * Allows deleting the autoscaling group without waiting
     * for all instances in the pool to terminate.  You can force an autoscaling group to delete
     * even if it's in the process of scaling a resource. Normally, this provider
     * drains all the instances before deleting the group.  This bypasses that
     * behavior and potentially leaves resources dangling.
     */
    readonly forceDelete?: pulumi.Input<boolean>;
    /**
     * Time (in seconds) after instance comes into service before checking health.
     */
    readonly healthCheckGracePeriod?: pulumi.Input<number>;
    /**
     * "EC2" or "ELB". Controls how health checking is done.
     */
    readonly healthCheckType?: pulumi.Input<string>;
    /**
     * One or more
     * [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
     * to attach to the autoscaling group **before** instances are launched. The
     * syntax is exactly the same as the separate
     * `aws.autoscaling.LifecycleHook`
     * resource, without the `autoscalingGroupName` attribute. Please note that this will only work when creating
     * a new autoscaling group. For all other use-cases, please use `aws.autoscaling.LifecycleHook` resource.
     */
    readonly initialLifecycleHooks?: pulumi.Input<pulumi.Input<inputs.autoscaling.GroupInitialLifecycleHook>[]>;
    /**
     * The name of the launch configuration to use.
     */
    readonly launchConfiguration?: pulumi.Input<string | LaunchConfiguration>;
    /**
     * Nested argument containing launch template settings along with the overrides to specify multiple instance types and weights. Defined below.
     */
    readonly launchTemplate?: pulumi.Input<inputs.autoscaling.GroupLaunchTemplate>;
    /**
     * A list of elastic load balancer names to add to the autoscaling
     * group names. Only valid for classic load balancers. For ALBs, use `targetGroupArns` instead.
     */
    readonly loadBalancers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 604800 and 31536000 seconds.
     */
    readonly maxInstanceLifetime?: pulumi.Input<number>;
    /**
     * The maximum size of the auto scale group.
     */
    readonly maxSize: pulumi.Input<number>;
    /**
     * The granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
     */
    readonly metricsGranularity?: pulumi.Input<string | enums.autoscaling.MetricsGranularity>;
    /**
     * Setting this causes this provider to wait for
     * this number of instances from this autoscaling group to show up healthy in the
     * ELB only on creation. Updates will not wait on ELB instance number changes.
     * (See also Waiting for Capacity below.)
     */
    readonly minElbCapacity?: pulumi.Input<number>;
    /**
     * The minimum size of the auto scale group.
     * (See also Waiting for Capacity below.)
     */
    readonly minSize: pulumi.Input<number>;
    /**
     * Configuration block containing settings to define launch targets for Auto Scaling groups. Defined below.
     */
    readonly mixedInstancesPolicy?: pulumi.Input<inputs.autoscaling.GroupMixedInstancesPolicy>;
    /**
     * The name of the auto scaling group. By default generated by this provider.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Creates a unique name beginning with the specified
     * prefix. Conflicts with `name`.
     */
    readonly namePrefix?: pulumi.Input<string>;
    /**
     * The name of the placement group into which you'll launch your instances, if any.
     */
    readonly placementGroup?: pulumi.Input<string | PlacementGroup>;
    /**
     * Allows setting instance protection. The
     * autoscaling group will not select instances with this setting for termination
     * during scale in events.
     */
    readonly protectFromScaleIn?: pulumi.Input<boolean>;
    /**
     * The ARN of the service-linked role that the ASG will use to call other AWS services
     */
    readonly serviceLinkedRoleArn?: pulumi.Input<string>;
    /**
     * A list of processes to suspend for the AutoScaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`.
     * Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your autoscaling group from functioning properly.
     */
    readonly suspendedProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration block(s) containing resource tags. Conflicts with `tags`. Documented below.
     */
    readonly tags?: pulumi.Input<pulumi.Input<inputs.autoscaling.GroupTag>[]>;
    /**
     * Set of maps containing resource tags. Conflicts with `tag`. Documented below.
     */
    readonly tagsCollection?: pulumi.Input<pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>[]>;
    /**
     * A set of `aws.alb.TargetGroup` ARNs, for use with Application or Network Load Balancing.
     */
    readonly targetGroupArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of policies to decide how the instances in the auto scale group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`.
     */
    readonly terminationPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availabilityZones`.
     */
    readonly vpcZoneIdentifiers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A maximum
     * [duration](https://golang.org/pkg/time/#ParseDuration) that this provider should
     * wait for ASG instances to be healthy before timing out.  (See also Waiting
     * for Capacity below.) Setting this to "0" causes
     * this provider to skip all Capacity Waiting behavior.
     */
    readonly waitForCapacityTimeout?: pulumi.Input<string>;
    /**
     * Setting this will cause this provider to wait
     * for exactly this number of healthy instances from this autoscaling group in
     * all attached load balancers on both create and update operations. (Takes
     * precedence over `minElbCapacity` behavior.)
     * (See also Waiting for Capacity below.)
     */
    readonly waitForElbCapacity?: pulumi.Input<number>;
}
