"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./catalogDatabase"));
__export(require("./catalogTable"));
__export(require("./classifier"));
__export(require("./connection"));
__export(require("./crawler"));
__export(require("./dataCatalogEncryptionSettings"));
__export(require("./devEndpoint"));
__export(require("./getScript"));
__export(require("./job"));
__export(require("./mltransform"));
__export(require("./partition"));
__export(require("./registry"));
__export(require("./resourcePolicy"));
__export(require("./securityConfiguration"));
__export(require("./trigger"));
__export(require("./userDefinedFunction"));
__export(require("./workflow"));
// Import resources to register:
const catalogDatabase_1 = require("./catalogDatabase");
const catalogTable_1 = require("./catalogTable");
const classifier_1 = require("./classifier");
const connection_1 = require("./connection");
const crawler_1 = require("./crawler");
const dataCatalogEncryptionSettings_1 = require("./dataCatalogEncryptionSettings");
const devEndpoint_1 = require("./devEndpoint");
const job_1 = require("./job");
const mltransform_1 = require("./mltransform");
const partition_1 = require("./partition");
const registry_1 = require("./registry");
const resourcePolicy_1 = require("./resourcePolicy");
const securityConfiguration_1 = require("./securityConfiguration");
const trigger_1 = require("./trigger");
const userDefinedFunction_1 = require("./userDefinedFunction");
const workflow_1 = require("./workflow");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:glue/catalogDatabase:CatalogDatabase":
                return new catalogDatabase_1.CatalogDatabase(name, undefined, { urn });
            case "aws:glue/catalogTable:CatalogTable":
                return new catalogTable_1.CatalogTable(name, undefined, { urn });
            case "aws:glue/classifier:Classifier":
                return new classifier_1.Classifier(name, undefined, { urn });
            case "aws:glue/connection:Connection":
                return new connection_1.Connection(name, undefined, { urn });
            case "aws:glue/crawler:Crawler":
                return new crawler_1.Crawler(name, undefined, { urn });
            case "aws:glue/dataCatalogEncryptionSettings:DataCatalogEncryptionSettings":
                return new dataCatalogEncryptionSettings_1.DataCatalogEncryptionSettings(name, undefined, { urn });
            case "aws:glue/devEndpoint:DevEndpoint":
                return new devEndpoint_1.DevEndpoint(name, undefined, { urn });
            case "aws:glue/job:Job":
                return new job_1.Job(name, undefined, { urn });
            case "aws:glue/mLTransform:MLTransform":
                return new mltransform_1.MLTransform(name, undefined, { urn });
            case "aws:glue/partition:Partition":
                return new partition_1.Partition(name, undefined, { urn });
            case "aws:glue/registry:Registry":
                return new registry_1.Registry(name, undefined, { urn });
            case "aws:glue/resourcePolicy:ResourcePolicy":
                return new resourcePolicy_1.ResourcePolicy(name, undefined, { urn });
            case "aws:glue/securityConfiguration:SecurityConfiguration":
                return new securityConfiguration_1.SecurityConfiguration(name, undefined, { urn });
            case "aws:glue/trigger:Trigger":
                return new trigger_1.Trigger(name, undefined, { urn });
            case "aws:glue/userDefinedFunction:UserDefinedFunction":
                return new userDefinedFunction_1.UserDefinedFunction(name, undefined, { urn });
            case "aws:glue/workflow:Workflow":
                return new workflow_1.Workflow(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "glue/catalogDatabase", _module);
pulumi.runtime.registerResourceModule("aws", "glue/catalogTable", _module);
pulumi.runtime.registerResourceModule("aws", "glue/classifier", _module);
pulumi.runtime.registerResourceModule("aws", "glue/connection", _module);
pulumi.runtime.registerResourceModule("aws", "glue/crawler", _module);
pulumi.runtime.registerResourceModule("aws", "glue/dataCatalogEncryptionSettings", _module);
pulumi.runtime.registerResourceModule("aws", "glue/devEndpoint", _module);
pulumi.runtime.registerResourceModule("aws", "glue/job", _module);
pulumi.runtime.registerResourceModule("aws", "glue/mLTransform", _module);
pulumi.runtime.registerResourceModule("aws", "glue/partition", _module);
pulumi.runtime.registerResourceModule("aws", "glue/registry", _module);
pulumi.runtime.registerResourceModule("aws", "glue/resourcePolicy", _module);
pulumi.runtime.registerResourceModule("aws", "glue/securityConfiguration", _module);
pulumi.runtime.registerResourceModule("aws", "glue/trigger", _module);
pulumi.runtime.registerResourceModule("aws", "glue/userDefinedFunction", _module);
pulumi.runtime.registerResourceModule("aws", "glue/workflow", _module);
//# sourceMappingURL=index.js.map