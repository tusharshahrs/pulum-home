"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./cache"));
__export(require("./cachesIscsiVolume"));
__export(require("./gateway"));
__export(require("./getLocalDisk"));
__export(require("./nfsFileShare"));
__export(require("./smbFileShare"));
__export(require("./storedIscsiVolume"));
__export(require("./tapePool"));
__export(require("./uploadBuffer"));
__export(require("./workingStorage"));
// Import resources to register:
const cache_1 = require("./cache");
const cachesIscsiVolume_1 = require("./cachesIscsiVolume");
const gateway_1 = require("./gateway");
const nfsFileShare_1 = require("./nfsFileShare");
const smbFileShare_1 = require("./smbFileShare");
const storedIscsiVolume_1 = require("./storedIscsiVolume");
const tapePool_1 = require("./tapePool");
const uploadBuffer_1 = require("./uploadBuffer");
const workingStorage_1 = require("./workingStorage");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:storagegateway/cache:Cache":
                return new cache_1.Cache(name, undefined, { urn });
            case "aws:storagegateway/cachesIscsiVolume:CachesIscsiVolume":
                return new cachesIscsiVolume_1.CachesIscsiVolume(name, undefined, { urn });
            case "aws:storagegateway/gateway:Gateway":
                return new gateway_1.Gateway(name, undefined, { urn });
            case "aws:storagegateway/nfsFileShare:NfsFileShare":
                return new nfsFileShare_1.NfsFileShare(name, undefined, { urn });
            case "aws:storagegateway/smbFileShare:SmbFileShare":
                return new smbFileShare_1.SmbFileShare(name, undefined, { urn });
            case "aws:storagegateway/storedIscsiVolume:StoredIscsiVolume":
                return new storedIscsiVolume_1.StoredIscsiVolume(name, undefined, { urn });
            case "aws:storagegateway/tapePool:TapePool":
                return new tapePool_1.TapePool(name, undefined, { urn });
            case "aws:storagegateway/uploadBuffer:UploadBuffer":
                return new uploadBuffer_1.UploadBuffer(name, undefined, { urn });
            case "aws:storagegateway/workingStorage:WorkingStorage":
                return new workingStorage_1.WorkingStorage(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "storagegateway/cache", _module);
pulumi.runtime.registerResourceModule("aws", "storagegateway/cachesIscsiVolume", _module);
pulumi.runtime.registerResourceModule("aws", "storagegateway/gateway", _module);
pulumi.runtime.registerResourceModule("aws", "storagegateway/nfsFileShare", _module);
pulumi.runtime.registerResourceModule("aws", "storagegateway/smbFileShare", _module);
pulumi.runtime.registerResourceModule("aws", "storagegateway/storedIscsiVolume", _module);
pulumi.runtime.registerResourceModule("aws", "storagegateway/tapePool", _module);
pulumi.runtime.registerResourceModule("aws", "storagegateway/uploadBuffer", _module);
pulumi.runtime.registerResourceModule("aws", "storagegateway/workingStorage", _module);
//# sourceMappingURL=index.js.map