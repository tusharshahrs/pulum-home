"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./cluster"));
__export(require("./eventSubscription"));
__export(require("./getCluster"));
__export(require("./getOrderableCluster"));
__export(require("./getServiceAccount"));
__export(require("./parameterGroup"));
__export(require("./securityGroup"));
__export(require("./snapshotCopyGrant"));
__export(require("./snapshotSchedule"));
__export(require("./snapshotScheduleAssociation"));
__export(require("./subnetGroup"));
// Import resources to register:
const cluster_1 = require("./cluster");
const eventSubscription_1 = require("./eventSubscription");
const parameterGroup_1 = require("./parameterGroup");
const securityGroup_1 = require("./securityGroup");
const snapshotCopyGrant_1 = require("./snapshotCopyGrant");
const snapshotSchedule_1 = require("./snapshotSchedule");
const snapshotScheduleAssociation_1 = require("./snapshotScheduleAssociation");
const subnetGroup_1 = require("./subnetGroup");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:redshift/cluster:Cluster":
                return new cluster_1.Cluster(name, undefined, { urn });
            case "aws:redshift/eventSubscription:EventSubscription":
                return new eventSubscription_1.EventSubscription(name, undefined, { urn });
            case "aws:redshift/parameterGroup:ParameterGroup":
                return new parameterGroup_1.ParameterGroup(name, undefined, { urn });
            case "aws:redshift/securityGroup:SecurityGroup":
                return new securityGroup_1.SecurityGroup(name, undefined, { urn });
            case "aws:redshift/snapshotCopyGrant:SnapshotCopyGrant":
                return new snapshotCopyGrant_1.SnapshotCopyGrant(name, undefined, { urn });
            case "aws:redshift/snapshotSchedule:SnapshotSchedule":
                return new snapshotSchedule_1.SnapshotSchedule(name, undefined, { urn });
            case "aws:redshift/snapshotScheduleAssociation:SnapshotScheduleAssociation":
                return new snapshotScheduleAssociation_1.SnapshotScheduleAssociation(name, undefined, { urn });
            case "aws:redshift/subnetGroup:SubnetGroup":
                return new subnetGroup_1.SubnetGroup(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "redshift/cluster", _module);
pulumi.runtime.registerResourceModule("aws", "redshift/eventSubscription", _module);
pulumi.runtime.registerResourceModule("aws", "redshift/parameterGroup", _module);
pulumi.runtime.registerResourceModule("aws", "redshift/securityGroup", _module);
pulumi.runtime.registerResourceModule("aws", "redshift/snapshotCopyGrant", _module);
pulumi.runtime.registerResourceModule("aws", "redshift/snapshotSchedule", _module);
pulumi.runtime.registerResourceModule("aws", "redshift/snapshotScheduleAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "redshift/subnetGroup", _module);
//# sourceMappingURL=index.js.map