"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./account"));
__export(require("./apiKey"));
__export(require("./authorizer"));
__export(require("./basePathMapping"));
__export(require("./clientCertificate"));
__export(require("./deployment"));
__export(require("./documentationPart"));
__export(require("./documentationVersion"));
__export(require("./domainName"));
__export(require("./getKey"));
__export(require("./getResource"));
__export(require("./getRestApi"));
__export(require("./getVpcLink"));
__export(require("./integration"));
__export(require("./integrationResponse"));
__export(require("./method"));
__export(require("./methodResponse"));
__export(require("./methodSettings"));
__export(require("./model"));
__export(require("./requestValidator"));
__export(require("./resource"));
__export(require("./response"));
__export(require("./restApi"));
__export(require("./restApiPolicy"));
__export(require("./stage"));
__export(require("./usagePlan"));
__export(require("./usagePlanKey"));
__export(require("./vpcLink"));
// Import resources to register:
const account_1 = require("./account");
const apiKey_1 = require("./apiKey");
const authorizer_1 = require("./authorizer");
const basePathMapping_1 = require("./basePathMapping");
const clientCertificate_1 = require("./clientCertificate");
const deployment_1 = require("./deployment");
const documentationPart_1 = require("./documentationPart");
const documentationVersion_1 = require("./documentationVersion");
const domainName_1 = require("./domainName");
const integration_1 = require("./integration");
const integrationResponse_1 = require("./integrationResponse");
const method_1 = require("./method");
const methodResponse_1 = require("./methodResponse");
const methodSettings_1 = require("./methodSettings");
const model_1 = require("./model");
const requestValidator_1 = require("./requestValidator");
const resource_1 = require("./resource");
const response_1 = require("./response");
const restApi_1 = require("./restApi");
const restApiPolicy_1 = require("./restApiPolicy");
const stage_1 = require("./stage");
const usagePlan_1 = require("./usagePlan");
const usagePlanKey_1 = require("./usagePlanKey");
const vpcLink_1 = require("./vpcLink");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:apigateway/account:Account":
                return new account_1.Account(name, undefined, { urn });
            case "aws:apigateway/apiKey:ApiKey":
                return new apiKey_1.ApiKey(name, undefined, { urn });
            case "aws:apigateway/authorizer:Authorizer":
                return new authorizer_1.Authorizer(name, undefined, { urn });
            case "aws:apigateway/basePathMapping:BasePathMapping":
                return new basePathMapping_1.BasePathMapping(name, undefined, { urn });
            case "aws:apigateway/clientCertificate:ClientCertificate":
                return new clientCertificate_1.ClientCertificate(name, undefined, { urn });
            case "aws:apigateway/deployment:Deployment":
                return new deployment_1.Deployment(name, undefined, { urn });
            case "aws:apigateway/documentationPart:DocumentationPart":
                return new documentationPart_1.DocumentationPart(name, undefined, { urn });
            case "aws:apigateway/documentationVersion:DocumentationVersion":
                return new documentationVersion_1.DocumentationVersion(name, undefined, { urn });
            case "aws:apigateway/domainName:DomainName":
                return new domainName_1.DomainName(name, undefined, { urn });
            case "aws:apigateway/integration:Integration":
                return new integration_1.Integration(name, undefined, { urn });
            case "aws:apigateway/integrationResponse:IntegrationResponse":
                return new integrationResponse_1.IntegrationResponse(name, undefined, { urn });
            case "aws:apigateway/method:Method":
                return new method_1.Method(name, undefined, { urn });
            case "aws:apigateway/methodResponse:MethodResponse":
                return new methodResponse_1.MethodResponse(name, undefined, { urn });
            case "aws:apigateway/methodSettings:MethodSettings":
                return new methodSettings_1.MethodSettings(name, undefined, { urn });
            case "aws:apigateway/model:Model":
                return new model_1.Model(name, undefined, { urn });
            case "aws:apigateway/requestValidator:RequestValidator":
                return new requestValidator_1.RequestValidator(name, undefined, { urn });
            case "aws:apigateway/resource:Resource":
                return new resource_1.Resource(name, undefined, { urn });
            case "aws:apigateway/response:Response":
                return new response_1.Response(name, undefined, { urn });
            case "aws:apigateway/restApi:RestApi":
                return new restApi_1.RestApi(name, undefined, { urn });
            case "aws:apigateway/restApiPolicy:RestApiPolicy":
                return new restApiPolicy_1.RestApiPolicy(name, undefined, { urn });
            case "aws:apigateway/stage:Stage":
                return new stage_1.Stage(name, undefined, { urn });
            case "aws:apigateway/usagePlan:UsagePlan":
                return new usagePlan_1.UsagePlan(name, undefined, { urn });
            case "aws:apigateway/usagePlanKey:UsagePlanKey":
                return new usagePlanKey_1.UsagePlanKey(name, undefined, { urn });
            case "aws:apigateway/vpcLink:VpcLink":
                return new vpcLink_1.VpcLink(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "apigateway/account", _module);
pulumi.runtime.registerResourceModule("aws", "apigateway/apiKey", _module);
pulumi.runtime.registerResourceModule("aws", "apigateway/authorizer", _module);
pulumi.runtime.registerResourceModule("aws", "apigateway/basePathMapping", _module);
pulumi.runtime.registerResourceModule("aws", "apigateway/clientCertificate", _module);
pulumi.runtime.registerResourceModule("aws", "apigateway/deployment", _module);
pulumi.runtime.registerResourceModule("aws", "apigateway/documentationPart", _module);
pulumi.runtime.registerResourceModule("aws", "apigateway/documentationVersion", _module);
pulumi.runtime.registerResourceModule("aws", "apigateway/domainName", _module);
pulumi.runtime.registerResourceModule("aws", "apigateway/integration", _module);
pulumi.runtime.registerResourceModule("aws", "apigateway/integrationResponse", _module);
pulumi.runtime.registerResourceModule("aws", "apigateway/method", _module);
pulumi.runtime.registerResourceModule("aws", "apigateway/methodResponse", _module);
pulumi.runtime.registerResourceModule("aws", "apigateway/methodSettings", _module);
pulumi.runtime.registerResourceModule("aws", "apigateway/model", _module);
pulumi.runtime.registerResourceModule("aws", "apigateway/requestValidator", _module);
pulumi.runtime.registerResourceModule("aws", "apigateway/resource", _module);
pulumi.runtime.registerResourceModule("aws", "apigateway/response", _module);
pulumi.runtime.registerResourceModule("aws", "apigateway/restApi", _module);
pulumi.runtime.registerResourceModule("aws", "apigateway/restApiPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "apigateway/stage", _module);
pulumi.runtime.registerResourceModule("aws", "apigateway/usagePlan", _module);
pulumi.runtime.registerResourceModule("aws", "apigateway/usagePlanKey", _module);
pulumi.runtime.registerResourceModule("aws", "apigateway/vpcLink", _module);
//# sourceMappingURL=index.js.map